<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:textInputLayout="clr-namespace:Syncfusion.XForms.TextInputLayout;assembly=Syncfusion.Core.XForms"
             xmlns:pickers="clr-namespace:Syncfusion.XForms.Pickers;assembly=Syncfusion.SfPicker.XForms"
             xmlns:buttons="clr-namespace:Syncfusion.XForms.Buttons;assembly=Syncfusion.Buttons.XForms"
             xmlns:xForms="clr-namespace:Syncfusion.SfPicker.XForms;assembly=Syncfusion.SfPicker.XForms"
             xmlns:border="clr-namespace:Syncfusion.XForms.Border;assembly=Syncfusion.Core.XForms"
             xmlns:converters="clr-namespace:GoalTracker.Converter;assembly=GoalTracker"
             xmlns:viewModels="clr-namespace:GoalTracker.ViewModels;assembly=GoalTracker"
             xmlns:infrastructure="clr-namespace:XamarinUniversity.Infrastructure;assembly=XamU.Infrastructure"
             xmlns:progressBar="clr-namespace:Syncfusion.XForms.ProgressBar;assembly=Syncfusion.SfProgressBar.XForms"
             x:Name="EditGoalPageInstance"
             x:Class="GoalTracker.Views.Main.Home.Goals.EditGoalPage">

    <!-- Only use to verify bindings through xaml-compilation / intellisense -->
    <!--<ContentPage.BindingContext>
        <viewModels:GoalViewModel/>
    </ContentPage.BindingContext>-->

    <ContentPage.Resources>
        <ResourceDictionary>
            <converters:BoolToMarginConverter x:Key="BoolToMarginConverter"/>
        </ResourceDictionary>
    </ContentPage.Resources>

    <ContentPage.Content>
        <ScrollView>
            <Grid Style="{StaticResource DefaultGrid}" RowSpacing="15">
                <Grid.RowDefinitions>
                    <RowDefinition Height="80"/>
                    <RowDefinition Height="95"/>
                    <RowDefinition Height="85"/>
                    <RowDefinition Height="250"/>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="250"/>
                    <RowDefinition Height="200"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="50"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <textInputLayout:SfTextInputLayout x:Name="GoalTitleTextInputLayout" Hint="&#x1F945; Titel" ErrorText="Du solltest deinem Ziel einen beschreibenden Namen geben." HelperText="Formuliere dein Ziel genau aus">
                    <textInputLayout:SfTextInputLayout.InputView>
                        <Entry Text="{Binding GoalTitle}"/>
                    </textInputLayout:SfTextInputLayout.InputView>
                </textInputLayout:SfTextInputLayout>

                <textInputLayout:SfTextInputLayout x:Name="GoalNotesTextInputLayout" Hint="&#x1F4D6; Notizen" Grid.Row="1" HelperText="Hinterlasse eine Notiz, z.B warum du dieses Ziel verwirklichen willst">
                    <textInputLayout:SfTextInputLayout.InputView>
                        <Editor AutoSize="TextChanges" Text="{Binding GoalNotes}" TextColor="Black"/>
                    </textInputLayout:SfTextInputLayout.InputView>
                </textInputLayout:SfTextInputLayout>

                <textInputLayout:SfTextInputLayout x:Name="GoalImageTextInputLayout" Hint="&#x1F306; Bild" Grid.Row="2" HelperText="Hinterlege ein Emoji das dein Ziel beschreibt">
                    <textInputLayout:SfTextInputLayout.InputView>
                        <Entry x:Name="GoalImageEntry" Text="{Binding GoalImage}" TextColor="Black" TextChanged="GoalImageEntry_OnTextChanged"/>
                    </textInputLayout:SfTextInputLayout.InputView>
                </textInputLayout:SfTextInputLayout>
                
                <border:SfBorder Grid.Row="3" HasShadow="True" ShadowColor="Black" BorderWidth="0">
                    <pickers:SfDatePicker x:Name="GoalStartDatePicker"
                                          Date="{Binding GoalStartDate}"
                                          MinimumDate="{Binding GoalMinimumStartDate}"
                                          HeaderText="&#x1F5D3; Start"/>
                </border:SfBorder>

                <buttons:SfCheckBox Grid.Row="4"  x:Name="GoalHasDueDateCheckBox"
                                    IsChecked="{Binding GoalHasDueDate}" 
                                    Text="Endet"/>

                <pickers:SfDatePicker Grid.Row="5"
                                      Grid.Column="0"
                                      Date="{Binding GoalEndDate}"
                                      MinimumDate="{Binding GoalMinimumEndDate}"
                                      IsVisible="{Binding GoalHasDueDate}"
                                      HeaderText="&#x1F5D3; Ende"/>

                <pickers:SfTimePicker x:Name="GoalNotificationTimePicker"
                                      Grid.Row="6"
                                      Grid.Column="0"
                                      HeaderText="&#x23F0; Erste Benachrichtigung"
                                      EnableLooping="True"
                                      Time="{Binding GoalNotificationTime}"
                                      Margin="{Binding GoalHasDueDate, Converter={StaticResource BoolToMarginConverter}}"/>

                <xForms:SfPicker Grid.Row="7"
                                 Grid.Column="0"
                                 HeaderText="&#x23F0; Erinnerungsinterval"
                                 ItemsSource="{Binding GoalNotificationIntervals}"
                                 SelectedIndex="{Binding GoalNotificationIntervalIndex}"/>

                <!-- Goal Tasks section -->
                <ScrollView Grid.Row="8" BackgroundColor="{DynamicResource Surface}">
                    <StackLayout Padding="15">
                        <Label Style="{StaticResource HeaderLabel}" Text="Aufgaben"/>
                        <StackLayout x:Name="GoalTaskStackLayout"/>
                        <StackLayout Padding="75, 0, 75, 0">
                            <buttons:SfButton WidthRequest="75" x:Name="AddGoalTaskButton" Text="Aufgabe hinzufügen" Clicked="AddGoalTaskButton_OnClicked" FontSize="10" HorizontalOptions="Fill"/>
                        </StackLayout>
                        <StackLayout Padding="75, 0, 75, 0">
                            <buttons:SfButton WidthRequest="75" x:Name="RemoveGoalTaskButton" IsVisible="False" Text="Aufgabe entfernen" Clicked="RemoveGoalTaskButton_OnClicked" FontSize="10" HorizontalOptions="Fill"/>
                        </StackLayout>
                    </StackLayout>
                </ScrollView>

                <Label x:Name="ErrorTextLabel" IsVisible="False" TextColor="{StaticResource Error}" Text="Du hast leider nicht alle benötigten Felder ausgefüllt." Grid.Row="9"/>

                <StackLayout Grid.Row="10" Padding="50, 0, 50, 0">
                    <buttons:SfButton Text="Speichern" Clicked="SaveGoalButton_OnClicked" Command="{Binding EditGoalAsyncCommand}" CommandParameter="{Binding BindedGoal}">
                        <buttons:SfButton.Behaviors>
                            <infrastructure:EventToCommandBehavior EventName="Clicked" Command="{Binding SettingViewModel.UnlockAchievementAsyncCommand, Source={x:Reference EditGoalPageInstance}}" CommandParameter="EDITGOAL"/>
                        </buttons:SfButton.Behaviors>
                    </buttons:SfButton>
                </StackLayout>

                <StackLayout x:Name="AchievementStackLayout" Margin="0, 15, 0, 0" Grid.Row="11" Grid.Column="0">
                    <Label x:Name="AchievementLabel" Text="Erfolg freigeschaltet" HorizontalTextAlignment="Center" HorizontalOptions="FillAndExpand"/>
                    <progressBar:SfCircularProgressBar x:Name="AchievementProgressBar" Progress="0" AnimationDuration="1000" IndeterminateAnimationDuration="1000" EasingEffect="Linear" IndicatorOuterRadius="0.7" IndicatorInnerRadius="0.65" ProgressCompleted="AchievementProgressBar_OnProgressCompleted">
                        <progressBar:SfCircularProgressBar.RangeColors>
                            <progressBar:RangeColorCollection>
                                <progressBar:RangeColor IsGradient="True" Color="#88A0D9EF" Start="0" End="25"/>
                                <progressBar:RangeColor IsGradient="True" Color="#AA62C1E5" Start="25" End="50"/>
                                <progressBar:RangeColor IsGradient="True" Color="#DD20A7DB" Start="50" End="75"/>
                                <progressBar:RangeColor IsGradient="True" Color="#FF1C96C5" Start="75" End="100"/>
                            </progressBar:RangeColorCollection>
                        </progressBar:SfCircularProgressBar.RangeColors>
                    </progressBar:SfCircularProgressBar>
                </StackLayout>
            </Grid>
        </ScrollView>
    </ContentPage.Content>
</ContentPage>